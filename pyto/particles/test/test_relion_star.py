"""
Tests relion_star.py

# Author: Vladan Lucic
# $Id:$
"""

__version__ = "$Revision$"


import os
import unittest

import numpy as np
import numpy.testing as np_test 
import pandas as pd
from pandas.testing import assert_frame_equal, assert_series_equal

from pyto.particles.relion_star import RelionStar

class TestRelionStar(np_test.TestCase):
    """
    """

    def setUp(self):
        dir_ =  os.path.dirname(__file__)
        self.in_star_path = os.path.join(dir_, "particles.star")
        self.out_star_path = os.path.join(dir_, "particles_cp.star")

    def test_parse(self):
        """Tests parse()
        """
        self.optics_test(starfile=self.in_star_path)
        self.particles_test(starfile=self.in_star_path)

    def optics_test(self, starfile):
        """Helper function for testing optics table
        """
        
        # table optics
        rs = RelionStar()
        rs.parse(
            starfile=starfile, tablename='data_optics', convert=True,
            check_labels=True)
        top = ['', '# version 30001', '']
        block_head = ['data_optics', '', 'loop_ '] 
        labels = [
            'rlnOpticsGroup', 'rlnOpticsGroupName', 'rlnSphericalAberration',
            'rlnVoltage', 'rlnTomoTiltSeriesPixelSize']
        np_test.assert_array_equal(rs.top, top)
        np_test.assert_array_equal(rs.block_head, block_head)
        np_test.assert_array_equal(rs.labels, labels)
        data_optics = pd.DataFrame(
            {'rlnOpticsGroup': [1, 2],
             'rlnOpticsGroupName':  ['opticsGroup1', 'opticsGroup2'], 
             'rlnSphericalAberration': [2.7, 12.7],
             'rlnVoltage': [300, 200], 
             'rlnTomoTiltSeriesPixelSize': [1.559, 2.559]})
        assert_frame_equal(rs.data, data_optics, check_dtype=False)
        bottom_1 = [
            '', '', '# version 30001', '', 'data_particles', '', 'loop_ '] 
        np_test.assert_array_equal(rs.bottom[:7], bottom_1)
        bottom_2 = (
            'tomo_1-2-005            5            0  5199.600000  '
            + '5316.400000   410.000000     0.000000     0.000000     '
            + '0.000000    84.000000   152.600000   152.800000            '
            + '1            2   152.600000   152.800000 '
            + 'tomo_1-2-005/5            1')
        np_test.assert_equal(rs.bottom[-1], bottom_2)

    def particles_test(self, starfile):
        """Helper function for testing particles table
        """
               
        # table particles
        rs = RelionStar()
        rs.parse(
            starfile=starfile, tablename='data_particles',
            convert=True, check_labels=False)
        top = ['', '# version 30001', '', 'data_optics', '', 'loop_ ']
        block_head = ['data_particles', '', 'loop_ '] 
        labels = [
            'rlnTomoName', 'rlnTomoParticleId', 'rlnTomoManifoldIndex',
            'rlnCoordinateX', 'rlnCoordinateY', 'rlnCoordinateZ', 
            'rlnOriginXAngst', 'rlnOriginYAngst', 'rlnOriginZAngst',
            'rlnAngleRot', 'rlnAngleTilt', 'rlnAnglePsi', 'rlnClassNumber', 
            'rlnRandomSubset', 'rlnAngleTiltPrior', 'rlnAnglePsiPrior', 
            'rlnTomoParticleName', 'rlnOpticsGroup']
        np_test.assert_array_equal(rs.top[:6], top)
        np_test.assert_array_equal(rs.block_head, block_head)
        np_test.assert_array_equal(rs.labels, labels)
        data_optics = pd.DataFrame(
            {'rlnTomoName': ['tomo_1-2-002', 'tomo_1-2-005'],
             'rlnTomoParticleId': [2, 5],
             'rlnTomoManifoldIndex': [0, 0],
             'rlnCoordinateX': [2199.6, 5199.6],
             'rlnCoordinateY': [2316.4, 5316.4],
             'rlnTomoParticleName': ['tomo_1-2-002/2', 'tomo_1-2-005/5'],
             'rlnOpticsGroup': [1, 1]})
        cols_test = labels[:5] + labels[16:]
        assert_frame_equal(rs.data[cols_test], data_optics, check_dtype=False)
        np_test.assert_equal(rs.bottom, [])
        
    def test_write(self):
        """Tests write()
        """

        rs = RelionStar()
        rs.parse(
            starfile=self.in_star_path, tablename='data_optics', convert=True,
            check_labels=True)
        rs.write(starfile=self.out_star_path)
        self.optics_test(starfile=self.out_star_path)
        self.particles_test(starfile=self.out_star_path)

        rs = RelionStar()
        rs.parse(
            starfile=self.in_star_path, tablename='data_particles',
            convert=True, check_labels=True)
        rs.write(starfile=self.out_star_path)
        self.optics_test(starfile=self.out_star_path)
        self.particles_test(starfile=self.out_star_path)

    def tearDown(self):
        """Removes file generated by tests.
        """
        
        try:
            os.remove(self.out_star_path)
        except FileNotFoundError:
            pass
        

if __name__ == '__main__':
    suite = unittest.TestLoader().loadTestsFromTestCase(TestRelionStar)
    unittest.TextTestRunner(verbosity=2).run(suite)
        
